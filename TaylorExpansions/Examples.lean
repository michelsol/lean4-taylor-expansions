import TaylorExpansions.Basic

open Filter Topology Finset

open Real in
/-- (1 + 1/n)^n ‚ü∂ e -/
example : Tendsto (Œª n : ‚Ñï ‚Ü¶ (1 + (1 : ‚Ñù) / n) ^ n) atTop (ùìù (exp 1)) := by
  suffices ‚àÉ (e : ‚Ñù ‚Üí ‚Ñù) (_ : Tendsto e (ùìù 0) (ùìù 0)),
      ‚àÄ·∂† x in ùìù[‚â†] 0, (1 + x) ^ (1 / x) = exp 1 + e x by
    obtain ‚ü®e, he, h1‚ü© := this
    let f (n : ‚Ñï) := exp 1 + e (1 / n)
    have h2 : Tendsto f atTop (ùìù (exp 1)) := by
      suffices Tendsto f atTop (ùìù (exp 1 + 0)) from by convert this using 2; simp
      apply Tendsto.add
      . exact tendsto_const_nhds
      . show Tendsto (e ‚àò Œª n : ‚Ñï ‚Ü¶ 1 / n) atTop (ùìù 0)
        apply Tendsto.comp he
        exact tendsto_one_div_atTop_nhds_zero_nat
    convert h2 using 0
    apply Iff.symm (tendsto_congr' ?_)
    rw [Filter.Eventually, Metric.mem_nhdsWithin_iff] at h1
    obtain ‚ü®Œµ, hŒµ, h1‚ü© := h1
    rw [EventuallyEq, eventually_atTop]
    use Nat.ceil (1 / Œµ + 1)
    intro k hk
    replace hk : k ‚â• 1 / Œµ + 1 := Nat.le_of_ceil_le hk
    have hŒµ' : 1 / Œµ > 0 := by positivity
    have hk' : (k : ‚Ñù) > 0 := by linarith
    replace hk : k > 1 / Œµ := by linarith
    replace hk : (1 : ‚Ñù) / k < Œµ := by refine (one_div_lt hŒµ hk').mp hk
    have h3 : (1 : ‚Ñù) / k ‚àà Metric.ball 0 Œµ ‚à© {0}·∂ú := by
      constructor
      . simpa using hk
      . norm_cast at hk'; simp; omega
    specialize h1 h3
    dsimp at h1
    symm
    convert h1 using 3
    calc
      ((1 : ‚Ñù) + 1 / k) ^ k = (1 + 1 / k) ^ (k : ‚Ñù) := by norm_cast
      _ = _ := by congr 1; simp


-- (1 + x) ^ (1 / x) = exp ((1 / x) * log (1 + x)) = exp ((1 / x) * (x + o(x)))
-- = exp (1 + o(1)) = exp 1 * exp (o(1)) = exp 1 * (1 + o(1)) = exp 1 + o(1)
  have ‚ü®e1, he1, h1‚ü© := taylor_rlog_one_add_littleO_order1
  have ‚ü®e2, he2, h2‚ü© := taylor_rexp_littleO_order0
  replace h2 := he1.eventually h2
  use Œª x ‚Ü¶ exp 1 * e2 (e1 x)
  use by
    convert_to Tendsto (Œª x ‚Ü¶ rexp 1 * e2 (e1 x)) (ùìù 0) (ùìù (rexp 1 * 0)) using 2
    . ring
    apply Tendsto.const_mul
    apply he2.comp he1
  rw [Metric.eventually_nhds_iff] at h1 h2
  obtain ‚ü®Œµ1, hŒµ1, h1‚ü© := h1
  obtain ‚ü®Œµ2, hŒµ2, h2‚ü© := h2
  rw [Filter.Eventually, Metric.mem_nhdsWithin_iff]
  use Œµ1 ‚äì Œµ2 ‚äì 1, by simp [hŒµ1, hŒµ2]
  intro x ‚ü®hx1, hx2‚ü©
  simp only [Metric.mem_ball, lt_inf_iff] at hx1
  simp at hx2
  specialize h1 hx1.left.left
  specialize h2 hx1.left.right
  calc
    (1 + x) ^ (1 / x) = exp (log (1 + x) * (1 / x)) := by
      refine rpow_def_of_pos ?_ (1 / x)
      replace hx1 := hx1.right
      simp [abs_lt] at hx1
      linarith
    _ = exp (1 / x * log (1 + x)) := by ring_nf
    _ = exp (1 / x * (x + e1 x * x)) := by simp [h1]
    _ = exp (1 + e1 x) := by
      congr 1
      field_simp
      ring
    _ = exp 1 * exp (e1 x) := by apply exp_add
    _ = exp 1 * (1 + e2 (e1 x)) := by rw [h2]
    _ = _ := by ring
